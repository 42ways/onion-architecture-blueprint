package de.fourtytwoways.onion.domain.entities.person;
// (c) 2022 Thomas Herrmann, 42ways GmbH

import com.google.common.collect.ImmutableList;
import de.fourtytwoways.onion.domain.values.enumeration.Sex;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Builder;
import lombok.NonNull;
import lombok.Value;
import lombok.With;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Value @Builder
@SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE", justification = "code generated by lombok")
public class Person {
    int id;
    @With @NonNull String name;
    @With @NonNull String surname;
    @With @NonNull LocalDate birthday;
    @With @NonNull Sex sex;
    @Builder.Default @With @NonNull ImmutableList<Address> addresses = ImmutableList.of();
    @Builder.Default @With @NonNull ImmutableList<BankAccount> bankAccounts = ImmutableList.of();

    public Person addAddress(Address address) {
        List<Address> newAddresses = new ArrayList<>(addresses);
        newAddresses.add(address);
        return this.withAddresses(ImmutableList.copyOf(newAddresses));
    }

    public Person removeAddress(Address address) {
        List<Address> newAddresses = new ArrayList<>(addresses);
        newAddresses.remove(address);
        return this.withAddresses(ImmutableList.copyOf(newAddresses));
    }

    public @NonNull List<Address> getAddresses() {
        return addresses;
    }

    public Person addBankAccount(BankAccount bankAccount) {
        List<BankAccount> newBankAccounts = new ArrayList<>(bankAccounts);
        newBankAccounts.add(bankAccount);
        return this.withBankAccounts(ImmutableList.copyOf(newBankAccounts));
    }

    public Person removeBankAccount(BankAccount bankAccount) {
        List<BankAccount> newBankAccounts = new ArrayList<>(bankAccounts);
        newBankAccounts.remove(bankAccount);
        return this.withBankAccounts(ImmutableList.copyOf(newBankAccounts));
    }

    public @NonNull List<BankAccount> getBankAccounts() {
        return bankAccounts;
    }
}
